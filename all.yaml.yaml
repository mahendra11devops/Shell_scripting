 Hi,
I am interested.
Please find below Details Required :
Full Name(as per your Aadhar Card): Mahendra Nikumbh
Current Company: Unistar Softtech Pvt Ltd.
Payroll Company Name: Unistar Softtech Pvt Ltd.
Previous Company: ACL Digital Pvt Ltd
Payroll Company Name: ACL Digital Pvt Ltd
Total Experience: 4.5 year
Relevant Experience: 4.5 year
Current CTC: 6 lpa
Expecting CTC: 9 Lpa
Official Notice Period/LWD : NA
Negotiable Notice period: Yes
Highest Edu: BE
college Name: COET NMKC Jalgaon
University Name : NMU Jalgaon.
Alternate Phone Number: 8669641094
Alternative E-Mail ID: mahendranikumbh11@gmail.com
PAN Card No: BCHPN5982Q
Do you have PF/Form16 from previous 2 companies: Yes
Updated Resume & company Pay-Slips: yes

Thanks And Regards,
Mahendra Nikumbh

DOCKERFILE :

# Use an official NGINX base image
FROM nginx:latest

# Optional: Set environment variables
ENV NGINX_VERSION=1.20.0

# Optional: set working directory
WDIR /app
# Optional: Copy additional configuration files
COPY nginx.conf /etc/nginx/nginx.conf

# Optional: Set a volume for persistent data
VOLUME /var/log/nginx

# Optional: Run commands
RUN sudo apt-get update

# Optional: Run Script
ENTRYPOINT ["./start.sh"]

# Expose port 80 to the outside world
EXPOSE 80

----

# multistage container file:

# Stage 1: Build stage
FROM node:14 as builder
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
RUN npm run build

# Stage 2: NGINX stage
FROM nginx:alpine
WORKDIR /usr/share/nginx/html

# Copy necessary files from the builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Expose the port NGINX will listen on
EXPOSE 80

# Default command to start NGINX
CMD ["nginx", "-g", "daemon off;"]



#Kubernetes.yaml

apiVersion: # version of k8s object
kind: # k8s object 
metadata: # info. about k8s object
spec: # real definition/manifest/configuration of k8s object


apiVersion = pod and svc is same
apiVersion = rs and deployment is same


# Pod.yaml

apiVersion: v1 #string
kind: Pod #string
metadata: # Dictionary
  name: demo-app
  labels: # Dictionary
    app: demo-app
spec:
  containers:
    - name: nginx
      image: nginx
      ports:
        - containerPort: 8080

--- # yaml seprator

# ReplicaSet.yaml

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: demo-app
  labels:
    app: demo-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: demo-app
  template:
    metadata: # Dictionary
      name: demo-app
      labels: # Dictionary
        app: demo-app
    spec:
      containers:
        - name: nginx
          image: nginx
          ports:
            - containerPort: 8080


---

# Deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app
  labels:
    app: demo-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: demo-app
  template:
    metadata: # Dictionary
      name: demo-app
      labels: # Dictionary
        app: demo-app
    spec:
      containers:
        - name: nginx
          image: nginx
          ports:
            - containerPort: 8080


---

# ns.yaml

apiVersion: v1
kind: Namespace
metadata:
  name: demo-ns
# spec: not requied in case of ns



pod

replicaset ----> pod & rs
deployment ----> pod & rs

---

# default-service.yaml

apiVersion: v1
kind: Service
metadata:
  name: backend-svc
spec:
  selector:
    app: demo-app
  ports:
    - port: 80 # svc port
      targetPort: 8080  # container port

---

# NodePort-service.yaml

apiVersion: v1
kind: Service
metadata:
  name: frontend-svc
spec:
  type: NodePort
  selector:
    app: demo-app
  ports:
    - port: 80
      targetPort: 8080
      nodePort: 30001 # optional   


---

# LoadBalancer-service.yaml

apiVersion: v1
kind: Service
metadata:
  name: lb-svc
spec:
  type: LoadBalancer
  selector:
    app: demo-app
  ports: 
    - port: 80
      targetPort: 8080 

-----

# pipeline

pipeline {
    agent any
    stages {
        stage('Build Maven') {
            steps {
                sh 'pwd'
                sh 'mvn clean install package'
            }
        }
        stage('Copy Artifacts') {
            steps {
                sh 'pwd'
                sh 'cp -r target/*.jar docker'
            }
        }
        stage('Unit Tests') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Build Docker Image'){
            steps{
                script {
                    def customImage = docker.build("mahendradevops/petclinic:${env.BUILD_NUMBER}", "./docker")
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                    customImage.push()    
                }
            }
        }
    }
    stage('Build on kubernetes'){
        steps {
            withKubeConfig([credentialsId: 'kubeconfig']) {
                sh 'pwd'
                sh 'cp -R helm/* .'
                sh 'ls -ltrh'
                sh 'pwd'
                sh '/usr/local/bin/helm upgrade --install petclinic-app petclinic --set image.repository=mahendradevops/petclinic --set image.tag=${BUILD_NUMBER}'
        }
    }
}

}
}

# Terraform EC2 CODE :

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = "us-west-2"  # Change this to your desired AWS region
}

resource "aws_security_group" "example_sg" {
  name        = "example-sg"
  description = "Example Security Group for EC2 instance"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_instance" "example_instance" {
  ami           = "ami-0c55b159cbfafe1f0"  # Change this to a valid AMI ID for your region
  instance_type = "t2.micro"  # Change this to your desired instance type

  key_name = "your-key-pair"  # Change this to your key pair name

  security_group_names = [aws_security_group.example_sg.name]

  tags = {
    Name = "example-instance"
  }
}


# Terraform VPC CODE :

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
  }
provider "aws" {
  region = "us-west-2"  # Change this to your desired AWS region
}

resource "aws_vpc" "example" {
  cidr_block = "10.0.0.0/16"  # Change this to your desired CIDR block
  enable_dns_support = true
  enable_dns_hostnames = true
  tags = {
    Name = "example-vpc"
  }
}

resource "aws_subnet" "example_subnet" {
  vpc_id                  = aws_vpc.example.id
  cidr_block              = "10.0.1.0/24"  # Change this to your desired CIDR block for the subnet
  availability_zone       = "us-west-2a"   # Change this to your desired availability zone
  map_public_ip_on_launch = true
  tags = {
    Name = "example-subnet"
  }
}

resource "aws_internet_gateway" "example_igw" {
  vpc_id = aws_vpc.example.id
}

resource "aws_route_table" "example_route_table" {
  vpc_id = aws_vpc.example.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.example_igw.id
  }

  tags = {
    Name = "example-route-table"
  }
}

resource "aws_route_table_association" "example_subnet_association" {
  subnet_id      = aws_subnet.example_subnet.id
  route_table_id = aws_route_table.example_route_table.id
}


# Ansible inentory.yaml

all:
  hosts:
    web01:
      ansible_host: 172.31.31.197
      ansible_user: centos
      ansible_ssh_private_key_file: Host_Ansible.pem
    web02:
      ansible_host: 172.31.18.26
      ansible_user: centos
      ansible_ssh_private_key_file: Host_Ansible.pem
    db01: 
      ansible_host: <privateIP>
      ansible_user: centos
      ansible_ssh_private_key_file: <pemfile>
  children:
    webservers:
      hosts:
        web01:
        web02: 
    dbservers:
      hosts:
        db01:
    dc_oregan:
      children:
       webservers:
       dbservers:

# Ansible Playbook.yaml

- name: Webserver Setup
  hosts: webservers
  become: yes
  tasks:
    - name: Install httpd
      ansible.builtin.yum:
        name: httpd
        state: present
    - name: Start service
      ansible.builtin.service:
        name: httpd
        state: started
        enabled: yes
- name: Dbservers setup
  hosts: dbservers
  become: yes
  tasks:
    - name: install mariadb server
      ansible.builtin.yum:
        name: mariadb-server
        state: present
    - name: Start mariadb server
      ansible.builtin.service:
        name: mariadb
        state: started
        enabled: yes


